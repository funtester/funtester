package org.funtester.plugin;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import org.funtester.plugin.code.HelperMethod;
import org.funtester.plugin.code.TestAnnotation;
import org.funtester.plugin.code.TestCase;
import org.funtester.plugin.code.TestMethod;
import org.funtester.plugin.code.Variable;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateExceptionHandler;
import freemarker.template.Version;

public class Main {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws Exception {

		Configuration cfg = new Configuration();
		
		cfg.setDirectoryForTemplateLoading( new File( "src/main/resources" ) );

		cfg.setIncompatibleImprovements( new Version( 2, 3, 20 ) );
		cfg.setDefaultEncoding( "UTF-8" );
		cfg.setLocale( Locale.US );
		cfg.setTemplateExceptionHandler( TemplateExceptionHandler.HTML_DEBUG_HANDLER );


		Map< String, Object > input = new HashMap< String, Object >();
		input.put( "test", createTestCase() );
		input.put( "annotation", createForTestNG() );
		// input.put( "annotation", createForJUnit() );
		
		
		Template template;
		Writer fileWriter = null;
		try {
			template = cfg.getTemplate( "java.ftl" );

			Writer consoleWriter = new OutputStreamWriter( System.out );
			template.process( input, consoleWriter );

			fileWriter = new FileWriter( new File( "output.txt" ) );

			template.process( input, fileWriter );
		} finally {
			if ( fileWriter != null ) {
				fileWriter.close();
			}
		}

	}

	private static TestAnnotation createForTestNG() {
		TestAnnotation t = new TestAnnotation();
		
		t.addImport( "org.testng.*" );
		
		t.withTestCase( "@Test" );
		t.withTestMethod( "@Test" );
		
		t.withCategoryStart( "( groups={" );
		t.withCategoryEnd( "} )" );
		t.withCategoryEachStart( "" );
		t.withCategoryEachEnd( "" );
		t.withCategoryEachSeparator( ", " );
		
		t.withSetUpOnce( "@BeforeClass" );
		t.withTearDownOnce( "@AfterClass" );
		
		t.withSetUp( "@BeforeMethod" );
		t.withTearDown( "@AfterMethod" );
		
		return t;
	}
	
	private static TestAnnotation createForJUnit() {
		TestAnnotation t = new TestAnnotation();
		
		t.addImport( "org.junit.*" );
		
		t.withTestCase( "@Test" );
		t.withTestMethod( "@Test" );
		
		t.withCategoryStart( "" );
		t.withCategoryEnd( "" );
		t.withCategoryEachStart( "@Category(" );
		t.withCategoryEachEnd( ")" );
		
		t.withSetUpOnce( "@BeforeClass" );
		t.withTearDownOnce( "@AfterClass" );
		
		t.withSetUp( "@Before" );
		t.withTearDown( "@After" );
		
		return t;
	}

	private static TestCase createTestCase() {
		TestCase t = new TestCase();
		
		t.addHeaderComment( "Generated by FunTester" );
		t.withNamespace( "functional" );
		
		t.addImport( "com.mycompany.MyClass1" );
		t.addImport( "com.mycompany.MyClass2" );
		
		t.addComment( "My Test Case" );
		t.withName( "MyTestCase" );
		
		t.addCategory( "functional" );
		t.addCategory( "slow" );
		t.addCategory( "bla" );
		
		t.addAttribute( new Variable( "String", "foo" ) );
		
		HelperMethod hm = ( new HelperMethod() )
				.withReturnType( "int" )
				.withName( "doSomething" )
				.addArg( new Variable( "String", "s" ) )
				.addArg( new Variable( "int", "i" ) )
				.addCommand( "return s.length - i;" )
				;
		t.addHelperMethod( hm );
		
		t.addSetUpOnceCommand( ";" );
		t.addTearDownOnceCommand( ";" );
		
		t.addSetUpCommand( ";" );
		t.addTearDownCommand( ";" );
		
		TestMethod tm = ( new TestMethod() )
				.withName( "testBar" )
				.addCommand( ";" )
				;
		t.addMethod( tm );
		
		return t;
	}

}
