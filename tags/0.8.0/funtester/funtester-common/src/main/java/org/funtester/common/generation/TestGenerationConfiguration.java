package org.funtester.common.generation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.funtester.common.report.TestExecutionReport;
import org.funtester.common.util.Copier;
import org.funtester.common.util.EqUtil;

/**
 * Configuration of the test generation for a plug-in.
 * 
 * @author Thiago Delgado Pinto
 *
 */
public class TestGenerationConfiguration
	implements Copier< TestGenerationConfiguration > {
	
	/** Used to detect the model version */
	private int modelVersion = 1;
	
	/** Software file. Example: /path/to/software.json */
	private String softwareFile = "";
	
	//
	// Semantic test generation options
	//
	
	/** Whether the application should generate semantic tests */
	private boolean generateSemanticTests = true;
	
	/** Semantic test file. Example: /path/to/tests.json */
	private String semanticTestFile = "";
	
	//
	// Plug-in
	//
	
	/** Plug-in identification. Example: org.funtester.funtester-plugin-fest */
	private String pluginId = "";
	
	/** Target testing framework (the plug-in could support more than one)
	 * Examples: junit, testng */
	private String testingFramework = "";
	
	//
	// Source code generation options
	//
	/** Whether the plug-in should generate code */
	private boolean generateCode = true;
	
	/** Output directory. Example: /path/to/src */
	private String outputDirectory = "";
	
	/** Main class of the system under test. Example: com.company.Main */
	private String mainClass = "";
	
	/** Package name for the test files. Example: tests.funtester */
	private String packageName = "";
	
	/** Timeout for a widget to be visible during the test, in milliseconds.
	 * For example, the time for dialog be visible. Example: 4000 ms */
	private int timeoutInMS = 5000;
	
	//
	// Test code execution options
	//
	
	/** Whether the plug-in should run the commands. The commands are run
	 *  BEFORE the execution trial */
	private boolean run = true;
	
	/** Commands to run. Example: mvn test */
	private List< String > commandsToRun = new ArrayList< String >();
	
	/** Whether the plug-in should try to execute the tests internally,
	 * without running any external applications. */
	private boolean tryToRunInternally = false;
	
	/** File with the test results (usually a XML file) generated by the
	 * testing framework. Example: testng-results.xml  */
	private String originalResultsFile = "";
	
	/** File with the test results in a format known by FunTester.
	 * Example: myapp_test_results.ftr
	 * @see TestExecutionReport */
	private String convertedResultsFile = "";

	
	
	public TestGenerationConfiguration() {
	}

	public int getModelVersion() {
		return modelVersion;
	}

	public void setModelVersion(int modelVersion) {
		this.modelVersion = modelVersion;
	}

	public String getSoftwareFile() {
		return softwareFile;
	}

	public void setSoftwareFile(String softwareFile) {
		this.softwareFile = softwareFile;
	}

	public boolean getGenerateSemanticTests() {
		return generateSemanticTests;
	}

	public void setGenerateSemanticTests(boolean generateSemanticTests) {
		this.generateSemanticTests = generateSemanticTests;
	}

	public String getSemanticTestFile() {
		return semanticTestFile;
	}

	public void setSemanticTestFile(String semanticTestFile) {
		this.semanticTestFile = semanticTestFile;
	}

	public String getPluginId() {
		return pluginId;
	}

	public void setPluginId(String pluginId) {
		this.pluginId = pluginId;
	}
	
	public String getTestingFramework() {
		return testingFramework;
	}

	public void setTestingFramework(String testingFramework) {
		this.testingFramework = testingFramework;
	}

	public boolean getGenerateCode() {
		return generateCode;
	}

	public void setGenerateCode(boolean generateCode) {
		this.generateCode = generateCode;
	}

	public String getOutputDirectory() {
		return outputDirectory;
	}

	public void setOutputDirectory(String outputDirectory) {
		this.outputDirectory = outputDirectory;
	}	

	public String getMainClass() {
		return mainClass;
	}

	public void setMainClass(String mainClass) {
		this.mainClass = mainClass;
	}

	public String getPackageName() {
		return packageName;
	}

	public void setPackageName(String packageName) {
		this.packageName = packageName;
	}
	
	public int getTimeoutInMS() {
		return timeoutInMS;
	}

	public void setTimeoutInMS(int timeoutInMS) {
		this.timeoutInMS = timeoutInMS;
	}

	public boolean getRun() {
		return run;
	}

	public void setRun(boolean run) {
		this.run = run;
	}

	public List< String > getCommandsToRun() {
		return commandsToRun;
	}

	public void setCommandsToRun(List< String > commandsToRun) {
		this.commandsToRun = commandsToRun;
	}
	
	public void setCommandsLinesToRun(String[] lines) {
		if ( null == commandsToRun ) {
			commandsToRun = new ArrayList< String >();
		}
		commandsToRun.clear();
		for ( String line : lines ) {
			commandsToRun.add( line );
		}
	}

	public boolean getTryToRunInternally() {
		return tryToRunInternally;
	}

	public void setTryToRunInternally(boolean tryToRunInternally) {
		this.tryToRunInternally = tryToRunInternally;
	}
	
	public String getOriginalResultsFile() {
		return originalResultsFile;
	}

	public void setOriginalResultsFile(String file) {
		this.originalResultsFile = file;
	}

	public String getConvertedResultsFile() {
		return convertedResultsFile;
	}

	public void setConvertedResultsFile(String convertedResultsFile) {
		this.convertedResultsFile = convertedResultsFile;
	}

	public TestGenerationConfiguration copy(final TestGenerationConfiguration that) {
		
		this.modelVersion = that.modelVersion;
		this.softwareFile = that.softwareFile;
		
		this.generateSemanticTests = that.generateSemanticTests;
		this.semanticTestFile = that.semanticTestFile;
		
		this.pluginId = that.pluginId;
		this.testingFramework = that.testingFramework;
		
		this.generateCode = that.generateCode;
		this.outputDirectory = that.outputDirectory;
		this.mainClass = that.mainClass;
		this.packageName = that.packageName;
		this.timeoutInMS = that.timeoutInMS;
		
		this.run = that.run;
		this.commandsToRun = that.commandsToRun;
		this.tryToRunInternally = that.tryToRunInternally;
		this.originalResultsFile = that.originalResultsFile;
		this.convertedResultsFile = that.convertedResultsFile;
		
		return this;
	}

	public TestGenerationConfiguration newCopy() {
		return ( new TestGenerationConfiguration() ).copy( this );
	}
	
	@Override
	public int hashCode() {
		return Arrays.hashCode( new Object[] {
				modelVersion,
				softwareFile,
				
				generateSemanticTests,
				semanticTestFile,
				
				pluginId,
				testingFramework,

				generateCode,
				outputDirectory,
				mainClass,
				packageName,
				timeoutInMS,
				
				run,
				commandsToRun,
				tryToRunInternally,
				originalResultsFile,
				convertedResultsFile
		} );
	}
	
	@Override
	public boolean equals(final Object o) {
		if ( ! ( o instanceof TestGenerationConfiguration ) ) { return false; }
		final TestGenerationConfiguration that = (TestGenerationConfiguration) o;
		return EqUtil.equalsIgnoreCase( softwareFile, that.softwareFile )
			&& EqUtil.equalsIgnoreCase( semanticTestFile, that.semanticTestFile )
			&& EqUtil.equalsIgnoreCase( outputDirectory, that.outputDirectory )
			&& EqUtil.equalsIgnoreCase( convertedResultsFile, that.convertedResultsFile )
			;
	}
	
	@Override
	public String toString() {
		return "";
	}
	
}
