FunTester :: TO-DO-LIST

OK- Implementar o salvamento arquivo de software -> JSON;
OK- Implementar o carregamento arquivo de software -> JSON;

OK- Corrigir clique/posicionamento na árvore ao ter elementos com o mesmo texto.
	Ex: Ao criar dois casos de uso com um fluxo básico, BF, não se consegue clicar
        no segundo, pois a árvore envia o usuário para o primeiro.

OK- Implementar novo/fechar/abrir/salvar/salvar como, de forma a manter o estado
	  correto do arquivo em uso;
   
OK- Implementar mudança de estado para IsDirty ao alterar algo no software,
      ou sempre deixar o salvar habilitado quando o projeto não está fechado.
   
OK- (rever?)- Implementar o armazenamento do projeto, levando em conta o vocabulário
   (o perfil já pode ser carregado pelo vocabulário, já que esse último já
   usa o VocabularioProxy). Ver se é interessante configurar o Jackson para
   carregar/descarregar a classe Vocabulary usando o proxy, ao invés de ter
   que programar com outras classes usando o VocabularyProxy.
   
OK- Revisar os métodos copy, newCopy, toString, hashCode e equals de todos
   os objetos do pacote core/software.
   
OK- Implementar os outros tipos de Passo (Step), além do DocStep, no Fluxo;

OK- Fazer com que a ação tenha um atributo "makeElementsEditable" para que,
  quando o usuário for criar um PASSO onde há um Element novo, esse poderá
  já ser seu EDITABLE setado para true. Essa medida facilita a criação dos
  oráculos, por exemplo, que pode ser feita para os elementos editáveis
  somente. ;)


- i18n: procurar por "TODO i18n" (ex: FlowValidator, dialogs, etc.)

- Ícones:
	- elementos
	- script de banco de dados
	- pré-condições
	- regras de negócio

- Refatorar classes "SemanticTest" para "AbstractTest";
	
- Software:

	OK- Corrigir a geração de valores para banco de dados (de ElementValueGenerator).
	
	OK- Corrigir, nas configurações de valores das regras de negócio (ex: query),
	  a obtenção dos valores de comboboxes que possuem somente 1 elemento. Atualmente
	  não pega o valor selecionado, apesar de somente ter um.
	  
	- Poder carregar caminho PARCIAL de arquivos em TODO o projeto!!!! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	- Poder salvar o caminho PARCIAL de arquivos -> perguntar ao usuário ao salvar <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	
	OK- Apresentar resultados da execução dos testes.

	- Implementar a exportação para HTML. Usar FreeMarker para gerar com template.
	
	- Fazer PILHA com últimos 5 arquivos abertos, na configuração do sistema.
		Mostrar os arquivos com um "..." no meio do caminho. Ex: "C:\dev\...\arquivo.fun"
	
	- Validar a remoção de RegEx, de DatabaseConfig e de QueryConfig para não poderem
		ser excluídos se houverem regras de negócio ligadas à essas.

- Caso de Uso:
	
	OK- Implementar Fluxos Disparadores; >> NÃO MAIS EXISTEM NO CASO DE USO !!!
	
		  SUGESTÃO 1: Criar um tipo de fluxo específico e criar esses fluxos na mesma
		  lista que o fluxo principal e os fluxos alternativos. Ter um método que
		  retorna somente os fluxos disparadores, assim como há um que retorna
		  somente o fluxo principal. Adicionar na IU a ação de criar fluxo disparador.
		  Os fluxos disparadores poderiam ser adicionados numa posição sempre ANTERIOR
		  ao fluxo principal. Dessa forma, a ordem dos fluxos seguiria sempre:
			Dispadores -> Principal -> Alternativos
		  >> PROBLEMA DA SUGESTÃO 1: Ter que mudar o algoritmo de geração de cenários
			 e potencialmente outras coisas, como filtrar os fluxos para listá-los
			 em listas de fluxos de um ReturnableFlow ou TerminableFlow.
		  
		  SUGESTÃO 2: Criar os fluxos disparadores DENTRO do caso de uso.
		  >> PROBLEMA DA SUGESTÃO 2: Interface/visualização diferente dos demais tipos
			 de fluxo.
		  >> Pode ser mais fácil agora!
	  
	  -------------------------------------------------------------------------------
	
	OK- Poder criar Pré-condição de Pós-condição; (É possível que seja necessário
	  fazer um deserializador para esse caso);
	
	OK- Verificar se ao CLONAR o caso de uso, seus objetos ficam todos com os IDs zerados
	  (acho que não!); Corrigir ou remover (desabilitar) a opção; 
	
	- Adiar?: CRUD de Scripts de banco de dados;
	
	- Ver como colocar o foco corretamente, em caso de erro. É por que tem aba?
	   Obs: Por causa do painel está separado não é, pois FlowDialog usa FlowPanel e não tem esse problema.
	   
	OK- Ver ITENS da árvore:
		- Fazer atualizar o lado direito ao atualizar um item;
		- Fazer mostrar o nó ao adicionar um índice;
	
	OK- Corrigir menu de contexto da árvore;
	
	OK- Implementar outros TIPOS DE FLUXO: { Terminador, Retornável, Cancelador };
	OK- Checar por caso de uso repetido ao cadastrar um caso de uso novo (id = 0);
	OK- Implementar o acesso aos Elementos, no Caso de Uso;	   
	   
- Elemento:
	
	OK- Implementar as Regras de Negócio nos Elementos do Caso de Uso;
	
	OK- Refatorar comportamento relacionado à seleção da configuração de valor e
	    mover ou duplicar (ou outro) para a VCSelectionPanel;
		
	OK- Corrigir a alteração de Regra de Negócio, que não está pegando (detectando)
		a configuração de valor;
		
	OK- Verificar regras de negócio repetidas na validação;
	
	- Ocultar ValueType e BusinessRules para quando o elemento NÃO for editável;
	
- Regras de Negócio:
	
	OK- Implementar a SingleVC;
	OK- Implementar a MultiVC;
	OK- Implementar a ElementBasedVC;
	OK- Implementar a RegExBasedVC;
	OK- Implementar a QueryBasedVC;
	
- Passos:

	OK- Checar ORDEM DOS ELEMENTOS dos passos; Parece que não está respeitando a ordem no caso de uso
	    ou nos passos, quando vai fazer um passo de oráculo, por exemplo;
	    >> Usar List  ?

	OK- Validar o número de Elementos permitidos para um Passo de Ação, de acordo com a especificação
		de ActionNickname;

	OK- Criar ações para tipos de passos diferentes: Ação, Oráculo, Documentação e Chamada a Caso de Uso;
	OK- Terminar as respectivas janelas e CRUDs; As janelas que possuem um ActionNickname devem filtrar
	    para apenas aquelas que possuem o StepKind do Step;
		
	OK- Nas janelas onde há a entrada de Elements, colocar um campo Available Elements, ou algo do tipo,
	    para facilitar ao usuário saber das possibilidades;
	  
	OK- Criar um botão para Copiar de Available Elements pode ser interessante para a OracleStepDialog;
	
>> BIG REFACTORINGS:

OK- Remover a interface Element;
- Remover a dependência de InteractableElement para UseCase, o que implica em mudar AllButOneWithValidValuesTMGS;
OK- Renomear o pacote funtester-shared para funtester-common;
	
# LATER (next version?):

OK- Criar uma pasta "dbtemplate", onde poderiam ser colocados arquivos JSON, com
    uma extensão diferente, onde haveria um template para DatabaseConfig. Ex.:
    mysql.dbt, firebird.dbt, postgresql.dbt, etc. Esses templates seriam carregados
    na inicialização do software e mantidos para o caso de uso que cria a
    configuração de uma conexão com o banco de dados; >> Arquivos colocados na pasta "jdbc".
  
OK- Colocar um atributo IMPORTÂNCIA nos casos de teste e métodos de teste gerados,
  que deve ser calculado de acordo com importância dos fluxos (e das regras de negócio envolvidas?):
  [ "importance_very_low", "importance_low", "importance_medium", "importance_high", "importance_very_high" ]
 
OK- PLUGINS: Os plugins para JUnit ou TestNG deve usar o valor da IMPORTÂNCIA na geração
  do código, para que se possa filtrar os testes conforme a importância e assim executar somente
  os testes desejados.
  https://github.com/junit-team/junit/wiki/Categories (JUnit - Java)
  http://testng.org/doc/documentation-main.html#test-groups (TestNG - Java)
  http://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group (PHPUnit - PHP)
  http://www.nunit.org/index.php?p=category&r=2.2 (NUnit - C#)
  CppUnit - C++ --> Não tem. Tem de ser feito pelo programa gerado pelo plug-in.
  
- Colocar nos Fluxos um atributo "Status" {Analisado, Projetado, Implementado, Testado, Implantado}

- Criar grafo com casos de uso e suas dependências;

- Refatorar a geração de valores para banco de dados (de ElementValueGenerator).

OK- Criar "drivers", que ficam salvos pelo FunTester, independentes do software.
  Cada DatabaseConfig pode ser registrada para um DatabaseDriver.
  No caso, um software continuaria tendo vários DatabaseConfig, cada um tendo
  uma referencia para o driver de FunTester. Assim, funciona da mesma forma
  que com os vocabulários.

  Cada driver pode também ter uma lista das classes que devem ser carregadas,
  após a classe principal. Isso resolve problemas como o do MySQL precisar
  carregar a classe com.mysql.jdbc.ParameterBindings.


==========================================================================================  
thoughts...

NOME ATUAL -> NOVO NOME (POSSIVELMENTE MELHOR) ?

ConditionState	-> SystemState
ElementKind		-> ElementClassification
Vocabulary		-> ProfileTranslation
ActionNickname	-> ActionTranslation
TestNGXmlxxx	-> TestNGxxx (retirar o Xml), já que a estrutura do relatório poderia estar em qq formato.
==========================================================================================
	
	
	<mockup version="1.0" skin="sketch" fontFace="Balsamiq Sans" measuredW="920" measuredH="700" mockupW="892" mockupH="688">
  <controls>
    <control controlID="18" controlTypeID="__group__" x="475" y="106" w="445" h="404" measuredW="445" measuredH="404" zOrder="0" locked="false" isInGroup="-1">
      <groupChildrenDescriptors>
        <control controlID="0" controlTypeID="com.balsamiq.mockups::TitleWindow" x="0" y="0" w="445" h="404" measuredW="450" measuredH="400" zOrder="0" locked="false" isInGroup="18">
          <controlProperties>
            <bottomheight>1</bottomheight>
            <close>false</close>
            <dragger>false</dragger>
            <maximizeRestore>false</maximizeRestore>
            <minimize>false</minimize>
            <text>A%20Few%20Quick%20Tips</text>
            <topheight>33</topheight>
          </controlProperties>
        </control>
        <control controlID="1" controlTypeID="com.balsamiq.mockups::Icon" x="397" y="9" w="-1" h="-1" measuredW="16" measuredH="16" zOrder="1" locked="false" isInGroup="18">
          <controlProperties>
            <icon>Info2Icon%7Cxsmall</icon>
          </controlProperties>
        </control>
        <control controlID="3" controlTypeID="com.balsamiq.mockups::Paragraph" x="59" y="71" w="351" h="311" measuredW="275" measuredH="80" zOrder="2" locked="false" isInGroup="18">
          <controlProperties>
            <bold>true</bold>
            <size>12</size>
            <text>To%20add%20new%20controls%2C%20drag%20them%20from%20the%20%7Bcolor%3A%23ff0000%7DUI%20Library%20above%7Bcolor%7D%0A%20%0AOr%20try%20the%20super-fast%20%7Bcolor%3A%23ff0000%7D%22Quick%20Add%22%20box%7Bcolor%7D%20in%20the%20menubar.%0A%20%0A%20%0A%20%0A%20%0ASelecting%2C%20moving%20and%20resizing%20controls%20should%20work%20just%20as%20you%27d%20expect.%0A%20%0A%20%0ATo%20edit%20text%2C%20double-click%20on%20it.%20Sometimes%20commas%20have%20meaning%2C%20as%20in%20the%20Menu%20control%20below%20-%20try%20to%20edit%20it%21</text>
          </controlProperties>
        </control>
        <control controlID="6" controlTypeID="com.balsamiq.mockups::Label" x="31" y="356" w="-1" h="-1" measuredW="328" measuredH="32" zOrder="3" locked="false" isInGroup="18">
          <controlProperties>
            <color>2848996</color>
            <italic>false</italic>
            <size>24</size>
            <text>Design%20AWESOME%20interfaces%21</text>
          </controlProperties>
        </control>
        <control controlID="7" controlTypeID="com.balsamiq.mockups::TextInput" x="138" y="124" w="148" h="-1" measuredW="77" measuredH="27" zOrder="4" locked="false" isInGroup="18">
          <controlProperties>
            <bold>true</bold>
            <text>Quick%20Add</text>
          </controlProperties>
        </control>
        <control controlID="8" controlTypeID="com.balsamiq.mockups::CallOut" x="7" y="66" w="-1" h="-1" measuredW="37" measuredH="39" zOrder="5" locked="false" isInGroup="18">
          <controlProperties>
            <backgroundAlpha>0.5</backgroundAlpha>
            <color>16776960</color>
          </controlProperties>
        </control>
        <control controlID="9" controlTypeID="com.balsamiq.mockups::CallOut" x="7" y="172" w="-1" h="-1" measuredW="35" measuredH="39" zOrder="6" locked="false" isInGroup="18">
          <controlProperties>
            <backgroundAlpha>0.5</backgroundAlpha>
            <color>16776960</color>
            <text>2</text>
          </controlProperties>
        </control>
        <control controlID="10" controlTypeID="com.balsamiq.mockups::CallOut" x="7" y="226" w="-1" h="-1" measuredW="36" measuredH="39" zOrder="7" locked="false" isInGroup="18">
          <controlProperties>
            <backgroundAlpha>0.5</backgroundAlpha>
            <color>16776960</color>
            <text>3</text>
          </controlProperties>
        </control>
        <control controlID="11" controlTypeID="com.balsamiq.mockups::Label" x="31" y="336" w="-1" h="-1" measuredW="243" measuredH="21" zOrder="8" locked="false" isInGroup="18">
          <controlProperties>
            <text>We%20hope%20Balsamiq%20Mockups%20can%20help%20you</text>
          </controlProperties>
        </control>
        <control controlID="12" controlTypeID="com.balsamiq.mockups::IconLabel" x="376" y="325" w="-1" h="-1" measuredW="58" measuredH="63" zOrder="9" locked="false" isInGroup="18">
          <controlProperties>
            <color>0</color>
            <icon>EmoticonIcon%7Clarge</icon>
            <text>Have%20Fun%21</text>
          </controlProperties>
        </control>
      </groupChildrenDescriptors>
    </control>
    <control controlID="19" controlTypeID="com.balsamiq.mockups::Label" x="28" y="23" w="-1" h="-1" measuredW="393" measuredH="36" zOrder="1" locked="false" isInGroup="-1">
      <controlProperties>
        <color>13576743</color>
        <size>28</size>
        <text>Welcome%20to%20Balsamiq%20Mockups</text>
      </controlProperties>
    </control>
    <control controlID="20" controlTypeID="com.balsamiq.mockups::Paragraph" x="28" y="74" w="279" h="58" measuredW="275" measuredH="80" zOrder="2" locked="false" isInGroup="-1">
      <controlProperties>
        <bold>false</bold>
        <size>12</size>
        <text>*This%20is%20a%20sample%20mockup%20to%20get%20you%20started.*%0AFeel%20free%20to%20delete%20it%20or%20reuse%20some%20of%20these%20controls%20for%20your%20own%20design.</text>
      </controlProperties>
    </control>
    <control controlID="21" controlTypeID="com.balsamiq.mockups::StickyNote" x="270" y="547" w="218" h="153" measuredW="109" measuredH="123" zOrder="3" locked="false" isInGroup="-1">
      <controlProperties>
        <text>Anything%20you%20do%20is%20immediately%20saved%20on%20your%20computer%2C%20so%20it%20will%20be%20there%20when%20you%20come%20back.%0A</text>
      </controlProperties>
    </control>
    <control controlID="22" controlTypeID="com.balsamiq.mockups::StickyNote" x="124" y="216" w="200" h="124" measuredW="109" measuredH="123" zOrder="4" locked="false" isInGroup="-1">
      <controlProperties>
        <text>%0AThere%27s%20full%20undo/redo%2C%20so%20don%27t%20be%20afraid%20to%20explore%21</text>
      </controlProperties>
    </control>
    <control controlID="27" controlTypeID="com.balsamiq.mockups::Arrow" x="643" y="12" w="27" h="124" measuredW="150" measuredH="100" zOrder="5" locked="false" isInGroup="-1">
      <controlProperties>
        <backgroundAlpha>1</backgroundAlpha>
        <color>10066329</color>
        <curvature>0</curvature>
        <direction>bottom</direction>
        <leftArrow>false</leftArrow>
        <rightArrow>true</rightArrow>
      </controlProperties>
    </control>
    <control controlID="33" controlTypeID="com.balsamiq.mockups::StickyNote" x="39" y="367" w="257" h="165" measuredW="109" measuredH="123" zOrder="6" locked="false" isInGroup="-1">
      <controlProperties>
        <color>2848996</color>
        <text>This%20demo%20version%20gives%20you%20a%20taste%20of%20Mockups.%20The%20Desktop%20version%20lets%20you%20import%20images%20from%20your%20Desktop%2C%20edit%20multiple%20mockups%2C%20link%20between%20them%2C%20create%20Symbols%20%28page%20masters%2C%20templates%2C%20and%20re-usable%20components%29%20and%20much%20more.</text>
      </controlProperties>
    </control>
    <control controlID="35" controlTypeID="com.balsamiq.mockups::MenuBar" x="393" y="358" w="350" h="29" measuredW="189" measuredH="29" zOrder="7" locked="false" isInGroup="-1">
      <controlProperties>
        <text>File%2CEdit%2CView%2CHelp</text>
      </controlProperties>
    </control>
  </controls>
</mockup>