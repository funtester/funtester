h1. Plugin Development

!FunTester currently uses plug-ins for transforming abstract tests into test scripts, executing these scripts and collecting their results.

A plug-in can be any executable file (e.g.: @.exe@, @.bat@, @.sh@, @.jar@, etc.). It is *not* necessary to create a plug-in using Java. Just use your preferred language and create an executable file.

If you choose creating a plug-in using Java, there are two projects that you may wanna know: @funtester-common@ and @funtester-plugin-common@. The first one contains common classes, used by all !FunTester's projects, while the second one contains useful classes for plug-in creation.

A plug-in...
# reads its configuration from a JSON file with the @.pcfg@ [[File_Extensions|extension]];
# reads the [[Abstract Test|abstract tests]] from a JSON file with the @.fat@ [[File_Extensions|extension]];
# transforms the [[Abstract Test|abstract tests]] into test scripts, in the target programming language, unit testing framework (e.g.: JUnit, !TestNG, etc.), and GUI testing framework (e.g.: FEST, Selenium, Robotium, etc.);
# executes command-lines to run the tests;
# reads the file containing the test results generated by the unit testing framework (usually a @.xml@ file);
# adjusts the test results, if needed;
# exports the test results to a JSON file with the @.ftr@ [[File_Extensions|extension]].
    
The project @funtester-plugin-common@ helps you doing 1, 2, 5, and 7. Of course, you can use Java to create plug-ins for generating test scripts (source code) to other programming languages (like Python, Ruby, C#, C++, etc.). We recommend you to use [[url:http://freemarker.org/|Free Marker]] or [[url:http://velocity.apache.org/|Velocity]] for that.
<br />

h3. Plug-in descriptor

A _plug-in descriptor_ is a JSON file containing some information about a plug-in, including the needed commands to execute it. After creating a plug-in, you should put the plug-in file at the @plugin@ folder and create a _plug-in descriptor_ with the same file name and the @.plg@ extension. The file is structured as follows:
<pre><code>{
	"id" : string,  -- It should be unique, so we recommend you to use a package-like name
	"name" : string,
	"version" : string,
	"description" : string,
	"frameworks" : [  -- Supported unit test frameworks
		{ "id" : string, "name" : string },
                ...
	],
	"canRunTestsInternally" : boolean,  -- Whether the tool can run the tests without any extra commands
	"authors" : string,  -- The authors of the tool
	"website" : string,  -- The official website
	"commandToRun" : string  -- The command to execute the plug-in
}
</code></pre>

The command-line in the field @commandToRun@ should use @{cfg}@ as a parameter, because this parameter will receive the *configuration file* (a file with the @.pcfg@ extension).
<br />

h4. Example

<pre><code>{
	"id" : "org.funtester.plugin.fest",
	"name" : "FEST plugin for FunTester",
	"version" : "0.7.1",
	"description" : "Generate FEST tests for Java Swing GUIs",
	"frameworks" : [
		{ "id" : "testng", "name" : "TestNG" }
	],
	"canRunTestsInternally" : false,
	"authors" : "Thiago Delgado Pinto",
	"website" : "http://www.assembla.com/projects/funtester-plugin-fest",
	"commandToRun" : "java -jar plugin/funtester-plugin-fest-0.7.1.jar {cfg}"
}
</code></pre>
    
    
    
    
    
    
    
    
    
